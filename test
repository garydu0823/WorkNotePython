import pyodbc
import datetime as dt
from datetime import datetime
import time
import yaml
import sys

t = time.time()


def run_data(tmp_Fac_ID, val_end_datetime):
    ConnPath = "//tasvmgeneral-88-lif1/AB_ExtraFiles/PEE/Photo/DBConnectionPool/Python/"
    ConnFileName = "DBConnection.yml"
    f = open(ConnPath + ConnFileName)
    stream = yaml.load(f)

    F16PEE_conn_str = stream['FAB16']['DBConnProd06_PEE']

    Source_conn_str = ""
    if tmp_Fac_ID == 'FAB 16':
        Source_conn_str = stream['FAB16']['DBConnProd06']
    elif tmp_Fac_ID == 'FAB 11':
        Source_conn_str = stream['FAB11']['DBConnProd06']
    elif tmp_Fac_ID == 'FAB 15':
        Source_conn_str = stream['FAB15']['DBConnProd06']
    else:
        sys.exit(1)

    SourceConn = pyodbc.connect(Source_conn_str)
    SourceCR = SourceConn.cursor()

    SourceDataStr = """
            begin
                set transaction isolation level Read Uncommitted
                set nocount on
                                        
                IF object_id('tempdb..#Setting') IS NOT NULL DROP TABLE #Setting
                select 
                    OPS_IMP_METRICS.OI_METRICS.GetMfgFacilityOID() FAC_OID
                    --, (case when manual_flag = 'Y' then dateadd(hour, 19, dtime - 1) else dtime - 1 end) begin_datetime
                    , dateadd(hour, 19, cast(cast(dtime as date) as datetime) - 1) begin_datetime
                    , (case when manual_flag = 'Y' then dateadd(hour, 19, dtime) else dtime end) end_datetime
                into #Setting
                from (
                    select dtime
                        , case when (datepart(HOUR, dtime) + datepart(MINUTE, dtime) + datepart(SECOND, dtime) = 0) then 'Y' else 'N' end manual_flag
                    from (		
                        --select cast('2021-07-02' as datetime) dtime	-- manual case
                        --select cast('2021-07-08 19:40:00' as datetime) dtime	-- non manual case
                        select cast('"""+val_end_datetime+"""' as datetime) dtime
                    ) a
                ) b
            
                --select * from #Setting
                                        
                /*****************************************************
                Query tech node table and write into #tech_node_table.
                ******************************************************/
                IF object_id('tempdb..#tech_node_table') IS NOT NULL DROP TABLE #tech_node_table
                SELECT  DISTINCT
                    RTRIM(PG.part_group_name) as group_name
                    ,RTRIM(AD1.attribute_value) as tech_node
                INTO #tech_node_table
                FROM reference..FP_part_group AS PG with (nolock)
                INNER JOIN #Setting s
                    ON 1=1
                INNER JOIN reference..FP_trav AS TRAV with (nolock)
                    ON PG.trav_OID = TRAV.trav_OID
                INNER JOIN reference..FP_attribute_detail AS AD with (nolock)
                    ON TRAV.trav_OID = AD.FP_OID
                INNER JOIN reference..FP_attribute_master AS AM with (nolock)
                    ON AD.attribute_OID = AM.attribute_OID
                INNER JOIN reference..mfg_facility AS MF with (nolock)
                    ON PG.mfg_facility_OID = MF.mfg_facility_OID
                INNER JOIN reference..FP_attribute_detail AS AD1 with (nolock)
                INNER JOIN reference..FP_trav AS TRAV1  with (nolock)
                    ON AD1.FP_OID = TRAV1.trav_OID 
                    ON PG.trav_OID = TRAV1.trav_OID
                INNER JOIN reference..FP_attribute_master AS AM1  with (nolock)
                    ON AD1.attribute_OID = AM1.attribute_OID
                INNER JOIN reference..FP_attribute_detail AS AD2 with (nolock)
                INNER JOIN reference..FP_trav AS TRAV2  with (nolock)
                    ON AD2.FP_OID = TRAV2.trav_OID 
                    ON PG.trav_OID = TRAV2.trav_OID
                INNER JOIN reference..FP_attribute_master AS AM2  with (nolock)
                    ON AD2.attribute_OID = AM2.attribute_OID
                                        
                WHERE
                    AM.attribute_name='TRAV_LIFE_CYCLE_CODE'
                    AND MF.mfg_facility_OID = s.FAC_OID
                    --AND TRAV.trav_status='ACTIVE'
                    AND AM1.attribute_name='TRAV_PROCESS_CODE'
                                        
                /*****************************************************************************
                Query fab_lot_hist data (Data of all lots track in/out) PHOTO steps.
                The result contains all lot level PHVTL tool process history records including
                lot_id, traveler and tracked_out_datetime.
                ******************************************************************************/
                IF object_id('tempdb..#tmp_fab_lot_hist') IS NOT NULL DROP TABLE #tmp_fab_lot_hist
                select *
                into #tmp_fab_lot_hist
                from fab_lot_extraction..fab_lot_hist with(nolock)
                INNER JOIN #Setting s
                    ON 1=1
                where 1=1
                    and part_type_code <> 'TW'
                    and step_deleted_sw = 'N' -- remove steps that are not processed.
                    and design_id <>'UNKNOWN'
                    and design_id <>'TEST'
                    and tracked_out_datetime between s.begin_datetime and s.end_datetime
                                        
                IF object_id('tempdb..#LOT_HISTORY') IS NOT NULL DROP TABLE #LOT_HISTORY
                select distinct
                    FLH.fab_lot_hist_OID,
                    rtrim(FLH.design_id) as DID,
                    rtrim(AREA.mfg_area_id) as mfg_area_id,
                    rtrim(FLH.lot_id) as lot_id,
                    rtrim(TRAV.trav_id) as trav_id,
                    rtrim(STEP.step_name) as step_name,
                    --substring(STEP.step_name,6,2) as "Layer",
                    FLEH.wafers_processed_qty as "QTY",
                    case when FLH.reworked_step_sw = 'N' then FLEH.wafers_processed_qty else 0 end as "Move",
                    case when FLH.reworked_step_sw = 'Y' then FLEH.wafers_processed_qty else 0 end as "Rework",
                    FLH.tracked_out_datetime,
                    FCV.mfg_date as "Micron_Date", 
                    FCV.work_week as "Micron_Week",
                    FP_WS.WS_name,
                    rtrim(FLEH.equip_id) equip_id,
                    FLH.part_type_code,
                    substring(FLH.part_type_code,5,1) as part5,		
                    FLH.target_lot_sw,
                    FLH.reworked_step_sw,
                    rtrim(TN.tech_node) as tech_node,
                    CASE WHEN FLH.step_in_emp_no = -1 THEN 'AUTO' ELSE 'MANUAL' END AS staging,
                    FLH.step_in_emp_no as step_in_emp_no,
                    (case when substring(rtrim(FLH.lot_id), 7,1) <> substring(rtrim(FLH.lot_id), 11,1) then 'Y' else 'N' end) Offload_flag
                into #LOT_HISTORY
                from #tmp_fab_lot_hist FLH with (nolock)
                INNER JOIN #Setting s
                    ON 1=1
                inner join OPS_IMP_METRICS.OI_METRICS.FabCalendarView FCV with (nolock)
                    on FLH.tracked_out_datetime between FCV.mfg_date_begin_datetime and FCV.mfg_date_end_datetime
                inner join traveler..trav_step TS with (nolock)
                    on FLH.trav_step_OID = TS.trav_step_OID
                inner join traveler..traveler TRAV with (nolock)
                    on TS.trav_OID = TRAV.trav_OID
                inner join traveler..step STEP with (nolock)
                    on TS.step_OID = STEP.step_OID
                inner join traveler..step_data_for_fab SDFAB with (nolock)
                    on TS.step_OID = SDFAB.step_OID
                inner join reference..mfg_area AREA with (nolock)
                    on SDFAB.mfg_area_OID = AREA.mfg_area_OID
                inner join fab_lot_extraction..fab_lot_equip_hist FLEH with (nolock)
                    on FLH.fab_lot_hist_OID = FLEH.fab_lot_hist_OID
                inner join reference..FP_equip FP_EQ with (nolock)
                    on FLEH.equip_id = FP_EQ.equip_name
                inner join reference..FP_WS FP_WS with (nolock)
                    on FP_EQ.WS_OID = FP_WS.WS_OID
                inner join reference..FP_part_in_part_group PART with (nolock)
                    on PART.part_code = FLH.part_type_code
                inner join reference..FP_part_group PG with (nolock)
                    on PART.part_group_OID = PG.part_group_OID
                inner join #tech_node_table AS TN with (nolock)
                    on TN.group_name=PG.part_group_name
                where 1=1		
                    and AREA.mfg_area_id like 'F%PHOTO' 		
                    and PG.mfg_facility_OID = s.FAC_OID 
                    and SDFAB.mfg_facility_OID = s.FAC_OID 		
                    and FLEH.wafers_processed_qty > 0 
                    and FP_EQ.equip_status = 'ACTIVE' 		
                    and STEP.step_name like '3010%'
                                         
                                        
                /***************************************************************************
                Accumulate move QTY/Move (wi RWK Move, wo RWK Move) by partition condition
                ****************************************************************************/
                                    
                --INSERT INTO #MOVE_DATA
                IF object_id('tempdb..#MOVE_DATA') IS NOT NULL	DROP TABLE #MOVE_DATA
                select 
                    '"""+tmp_Fac_ID+"""' FAC_ID 
                    , AA.Micron_Week,AA.Micron_Date,AA.tech_node,AA.DID,AA.part5,AA.step_name,AA.equip_id
                    , sum(AA.QTY) "Wfr_Move_wiRWK"
                    , sum(AA.Move) "Wfr_Move_woRWK"
                    , sum(Case when  AA.QTY > 0 then 1 else 0 end) "Lot_Move_wiRWK"
                    , sum(Case when AA.Move > 0 then 1 else 0 end) "Lot_Move_woRWK"
                    , sum(case when Offload_flag = 'Y' then AA.QTY else 0 end) "Wfr_Move_wiRWK_SWAPWIP"	--20210702: differenct with normal offload
                    , sum(case when Offload_flag = 'Y' then AA.Move else 0 end) "Wfr_Move_woRWK_SWAPWIP"	--20210702: differenct with normal offload
                    , sum(Case when  AA.QTY > 0 and Offload_flag = 'Y' then 1 else 0 end) "Lot_Move_wiRWK_SWAPWIP"	--20210702: differenct with normal offload
                    , sum(Case when AA.Move > 0 and Offload_flag = 'Y' then 1 else 0 end) "Lot_Move_woRWK_SWAPWIP"	--20210702: differenct with normal offload
                    ,getdate() insert_datetime
                into #MOVE_DATA
                from #LOT_HISTORY AA
                group by AA.DID, AA.step_name, AA.equip_id, AA.Micron_Date ,AA.Micron_Week, AA.part5, AA.tech_node
                                    
                select * from #MOVE_DATA
                                        
                set transaction isolation level READ COMMITTED
            end
        """

    # print(Source_conn_str)
    # print(SourceDataStr)

    SourceData = SourceCR.execute(SourceDataStr)
    SourceCR.close
    SourceConn.close
    # sys.exit(0)

    TargetConn = pyodbc.connect(F16PEE_conn_str)
    TargetCR = TargetConn.cursor()

    TmpTabCols = [i[0] for i in SourceData.description]
    TmpTabColsStr = ','.join(TmpTabCols)  # eg. col1, col2, col3
    QuestionMarkString = concatSign('?', TmpTabColsStr.count(','))  # eg ?,?,?,?

    ListSourceData = list(SourceData)

    TargetTableName = '[OMT_PROC_METRICS].[dbo].[Photo_OMT_Move]'

    prepareTargetTempTable = """
                    if object_id('tempdb..#TmpData') is not null
                        drop table #TmpData
                    select *
                    into #TmpData
                    from """ + TargetTableName + """ wtih (nolock)
                    where 1=0
                """

    TargetCR.execute(prepareTargetTempTable)

    print("  (Ins)Loop-Start Time: ", dt.datetime.now().time())
    i = 0
    for row in ListSourceData:
        sql = """
                insert into #TmpData(""" + TmpTabColsStr + """)
                values(""" + QuestionMarkString + """)			
            """
        TargetCR.execute(sql, row)

        ## print insert data cnt ##
        i += 1
        if (i % 1000) == 0:
            print("    --insert[", i, "]: ", dt.datetime.now().time())

    print("  (Ins)Loop-End Time: ", dt.datetime.now().time())

    # insert data into each tables
    insertDataStr = """
                begin
                    delete a
                    from """ + TargetTableName + """ a
                    join #TmpData b
                        on a.Micron_Date = b.Micron_Date
                        and a.FAC_ID = b.FAC_ID
                        and a.tech_node = b.tech_node
                        and a.step_name = b.step_name
                        and a.DID = b.DID
                        and a.equip_id = b.equip_id
                        and a.part5 = b.part5

                    delete """ + TargetTableName + """
                    where Micron_Date < getdate() - 370
                        and DATEPART(WEEKDAY, GETDATE()+6) = 4	-- purge data every Thu.                    

                    insert into """ + TargetTableName + """ 
                    select * from #TmpData
                end
            """
    # print(insertDataStr)

    TargetCR.execute(insertDataStr)
    TargetConn.commit()

    TargetCR.close
    TargetConn.close


def concatSign(sign, frequency):  # eg. ?,?,?,?,?,?
    tmp_sign = sign
    for i in range(0, frequency, 1):
        tmp_sign += ',' + sign
    # print(tmp_sign)
    return tmp_sign

def main():
    FAC_ID = ""
    if len(sys.argv) <= 1:
        FAC_ID = "FAB 16"
    else:
        FAC_ID = sys.argv[1]

    dtime_list = []
    # for reconver data
    # FAC_ID = "FAB 16"
    # dtime_list = [
    #     "2021-01-01"
    #     , "2021-01-02"
    #     , "2021-01-03"
    #     , "2021-01-04"
    # ]

    time_list = sorted(dtime_list)
    if len(dtime_list) >= 1:
        # for data reload (day by day)

        for dtime in time_list:
            run_time = dtime + " 00:00:00"
            print(run_time)
            run_data(FAC_ID, run_time)

    else:
        # for normal running
        run_time = datetime.now().strftime("%Y-%m-%d %H") + ":00:00"  # end datetime
        datetime.now()
        print(run_time)
        run_data(FAC_ID, run_time)

if __name__ == "__main__":
    main()
